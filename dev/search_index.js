var documenterSearchIndex = {"docs":
[{"location":"","page":"Home","title":"Home","text":"CurrentModule = DUNEatLapp","category":"page"},{"location":"#DUNEatLapp","page":"Home","title":"DUNEatLapp","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Documentation for DUNEatLapp.","category":"page"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"","page":"Home","title":"Home","text":"Modules = [DUNEatLapp]","category":"page"},{"location":"#DUNEatLapp.Condition_Cluster_Max_Emin-Tuple{DataFrames.DataFrame, Float64, Float64, Float64, Bool}","page":"Home","title":"DUNEatLapp.Condition_Cluster_Max_Emin","text":"function ConditionClusterMaxEmin(dfUla::DataFrame,radius::Float64,Emin::Float64,limit::Float64,option::Bool) function to select the clusters with the highest-energy and with no event between them and the limit variable. All clusters under Emin are removed. It accepts a DataFrame for df_Ula, a Float for radius and limit (in centimeters), a float for Emin (in keV) and a Boolen for option.  If option is True, it returns a DataFrame with the number of the event and the energy of the cluster. If option is false, it returns the number of events rejected and the number of initial events.\n\n\n\n\n\n","category":"method"},{"location":"#DUNEatLapp.Single_Hits_lardon-Tuple{String}","page":"Home","title":"DUNEatLapp.Single_Hits_lardon","text":"function SingleHitslardon(path::String) function to collect the data about the single hits found by Lardon. It receives the path of the HDF5 files in your directory and it returns a DataFrame with all the single Hits and the information about\n\n\n\n\n\n","category":"method"},{"location":"#DUNEatLapp.apply_E_resolution-Tuple{Vector, Int64}","page":"Home","title":"DUNEatLapp.apply_E_resolution","text":"function applyEresolution(TrueEdata::Vector, Eresolution::Int) Function to apply an energy resolution on data. This resolution comes from the MicroBoone experiment and it is by default at 10% for 1 MeV. To adjust the resolution, you have to take in account the 10 % and add or subtract to obtain the the desired value. It accepts a vector for the TrueEdata and an integer for the Eresolution. It returns a vector. \n\n\n\n\n\n","category":"method"},{"location":"#DUNEatLapp.apply_std_E_resolution-Tuple{Vector, Real}","page":"Home","title":"DUNEatLapp.apply_std_E_resolution","text":"function applystdEresolution(TrueEdata::Vector,Eresolution::Real) function to apply a sigma/E = resolution / sqrt(E) energy resolution It assumes that the TrueEdata is in MeV, otherwise the results will be incorrect\n\n\n\n\n\n","category":"method"},{"location":"#DUNEatLapp.cluster_energy_Max-Tuple{DataFrames.DataFrame, Float64}","page":"Home","title":"DUNEatLapp.cluster_energy_Max","text":"function clusterenergyMax(df::DataFrame,radius::Float64) function to get the cluster with the highest energy. It accepts a DataFrame for df and a Float for radius (in centimeters). It returns a DataFrame with the number of the event and the energy of the cluster.\n\n\n\n\n\n","category":"method"},{"location":"#DUNEatLapp.find_n_clusters_in_radius","page":"Home","title":"DUNEatLapp.find_n_clusters_in_radius","text":"function findnclustersinradius(vectorE::Vector{AbstractFloat}, vectorCoords::Vector{Vector{<:AbstractFloat}}, Threshold::Float64 = 1000, radius::Float64=100.) function to get the the number of clusters above a given threshold in a given radius\n\n\n\n\n\n","category":"function"},{"location":"#DUNEatLapp.full_process_clustering_neutron_file-Tuple{DataFrames.DataFrame, Float64, Vector{Int64}, Vector{<:Real}}","page":"Home","title":"DUNEatLapp.full_process_clustering_neutron_file","text":"function fullprocessclusteringneutronfile(df::DataFrame,radius::Float64,nArinfo::Vector{Int64},tnAr_info::Vector{<:Real}) Function to process a neutron run and return cluster information about energy and position\n\n\n\n\n\n","category":"method"},{"location":"#DUNEatLapp.get_bin_centers-Tuple{StatsBase.Histogram}","page":"Home","title":"DUNEatLapp.get_bin_centers","text":"getbincenters(h::Histogram) Function to get the bin centers of a given histogram It accepts an histogram and return the bin centers\n\n\n\n\n\n","category":"method"},{"location":"#DUNEatLapp.get_capture_position-Tuple{String}","page":"Home","title":"DUNEatLapp.get_capture_position","text":"function getcaptureposition(namefile::String) function to get the capture positions of neutrons It will take a xxxnt_Gammas.csv to return the position of neutron captures using the first gamma of each decay\n\n\n\n\n\n","category":"method"},{"location":"#DUNEatLapp.get_clusters_energy_of_evt-Tuple{DataFrames.DataFrame, Float64}","page":"Home","title":"DUNEatLapp.get_clusters_energy_of_evt","text":"function getclustersenergyofevt(data_Ar::DataFrame,radius::Float64) function to make the information of energy of each cluster of one event It receives the dataframe from G4 of a single event and a radius in cm and returns the energy of each cluster\n\n\n\n\n\n","category":"method"},{"location":"#DUNEatLapp.get_clusters_vertex_and_energy_of_evt-Tuple{DataFrames.DataFrame, Float64}","page":"Home","title":"DUNEatLapp.get_clusters_vertex_and_energy_of_evt","text":"function getclustersvertexandenergyofevt(data_Ar::DataFrame, radius::Float64) Function to get the energy and average position of each cluster It receives the event data frame and the radius for the clsutering\n\n\n\n\n\n","category":"method"},{"location":"#DUNEatLapp.get_clusters_vertex_and_energy_of_evt-Tuple{DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, UnitRange{Int64}}, Float64}","page":"Home","title":"DUNEatLapp.get_clusters_vertex_and_energy_of_evt","text":"get_clusters_vertex_and_energy_of_evt(data_Ar::SubDataFrame{DataFrame, DataFrames.Index, UnitRange{Int64}}, radius::Float64)\n\nSame as before to ensure compatability with @view usage\n\n\n\n\n\n","category":"method"},{"location":"#DUNEatLapp.get_clusters_vertex_and_energy_of_evt_space_time-Tuple{DataFrames.DataFrame, Float64}","page":"Home","title":"DUNEatLapp.get_clusters_vertex_and_energy_of_evt_space_time","text":"function getclustersvertexandenergyofevtspacetime(dataAr::DataFrame, radius::Float64) Similar to getclustersvertexandenergyof_evt but using the time coordinate to better differentiate hits that are produced by long time decays.  Time coordinate (in us) is converted to a fourth coordinate assuming a drift time of 0.1601 cm/us (expected value at 500 V/cm) \n\n\n\n\n\n","category":"method"},{"location":"#DUNEatLapp.get_evts_index-Tuple{DataFrames.DataFrame}","page":"Home","title":"DUNEatLapp.get_evts_index","text":"function getevtsindex(df::DataFrame) Function to get the index of start and end of each event in a ulalap.csv file It accepts a dataframe and returns a matrix with column corresponding to the: numberofevent  indexstartevt  indexendsevt\n\n\n\n\n\n","category":"method"},{"location":"#DUNEatLapp.get_hits_in_active_LAr_TPC","page":"Home","title":"DUNEatLapp.get_hits_in_active_LAr_TPC","text":"function gethitsinactiveLArTPC(dfevtallhits::DataFrame,fidu::Float64 = 0.) Function to filter the hits of a given event and select only hits in active region of the active volume It uses the fact that the CRPs/cathode represents a surface of 6000x1300 cm2 For fiducialization purposes a given fiducialization can also be used (in cm)\n\n\n\n\n\n","category":"function"},{"location":"#DUNEatLapp.get_hits_in_inactive_LAr-Tuple{DataFrames.DataFrame}","page":"Home","title":"DUNEatLapp.get_hits_in_inactive_LAr","text":"function gethitsininactiveLAr(dfevtall_hits::DataFrame) Function to the hits in the inactive LAr between the field cage and the primary membrane of the cryostat\n\n\n\n\n\n","category":"method"},{"location":"#DUNEatLapp.get_info_neutron_captures_Ar-Tuple{String, String}","page":"Home","title":"DUNEatLapp.get_info_neutron_captures_Ar","text":"function getinfoneutroncapturesAr(myfile::String,nameprimary::String) function to obtain the information of neutrons that were captured in argon It accepts the names of the files containing the primary info and the secondaries It return a matrix with info of the primary neutron and position of origin and capture\n\n\n\n\n\n","category":"method"},{"location":"#DUNEatLapp.get_n_primaries-Tuple{String}","page":"Home","title":"DUNEatLapp.get_n_primaries","text":"function getnprimaries(my_file::String) Function to get the number of primaries generated It accepts the name as string of the primary file produced by ulalap and returns the number of primaries that have been used for the simulations\n\n\n\n\n\n","category":"method"},{"location":"#DUNEatLapp.get_primary_vertex-Tuple{String}","page":"Home","title":"DUNEatLapp.get_primary_vertex","text":"function getprimaryvertex(my_file::String) function to get the primary info from a csv file into a data frame It accepts the name of the file and returns a data frame\n\n\n\n\n\n","category":"method"},{"location":"#DUNEatLapp.get_rate_neutron_captures_Ar","page":"Home","title":"DUNEatLapp.get_rate_neutron_captures_Ar","text":"function getrateneutroncapturesAr(myfile::String,nameprimary::String,fidu::Real) function to get the rate of neutrons that are captured in LAr and in a fiducial volume of LAr  It accepts a String for myfile, a String for nameprimary and a Real in centimeters for fidu. It returns two floats.\n\n\n\n\n\n","category":"function"},{"location":"#DUNEatLapp.get_sampling-Tuple{StatsBase.Histogram, Int64, Float64}","page":"Home","title":"DUNEatLapp.get_sampling","text":" get_sampling(h::Histogram,n_samples::Int,res::Float64)\n\nFuntion to sample from a histogram and apply an energy resolution It accepts an histogram, the number of required samples n_samples and the resolution you want to apply res\n\n\n\n\n\n","category":"method"},{"location":"#DUNEatLapp.get_sampling-Tuple{Vector{Float64}, Vector{Float64}, Int64, Float64}","page":"Home","title":"DUNEatLapp.get_sampling","text":"get_sampling(bin_centers::Vector{Float64},bin_weights::Vector{Float64},n_samples::Int,res::Float64)\n\nFuntion to sample from a distribution and apply an energy resolution It accepts a distribution x,y, where x are the values and y are the weights, the number of required samples n_samples and the resolution you want to apply res\n\n\n\n\n\n","category":"method"},{"location":"#DUNEatLapp.greet_DUNEatLapp-Tuple{}","page":"Home","title":"DUNEatLapp.greet_DUNEatLapp","text":"function greet_DUNEatLapp() Function to test if the package works There is no entry and the output is Hello DUNEatLapp!\n\n\n\n\n\n","category":"method"},{"location":"#DUNEatLapp.is_n_capture_on_Ar-Tuple{String, String}","page":"Home","title":"DUNEatLapp.is_n_capture_on_Ar","text":"is_n_capture_on_Ar(my_file_secondary::String, my_file_primary::String; \n                   capture_proc::String = \"nCapture\", \n                   capture_Z::Int = 18) -> Tuple{Vector{Int}, Vector{Float64}}\n\nDetermines if neutron capture events occurred on a specific element (default: Argon, Z=18)  from secondary particle data. Returns a tuple of vectors indicating capture status and  time for each primary event.\n\nArguments\n\nmy_file_secondary::String: Path to the secondary particle data file.\nmy_file_primary::String: Path to the primary particle data file.\ncapture_proc::String: (Optional) Process type to filter (default: \"nCapture\").\ncapture_Z::Int: (Optional) Atomic number to filter for (default: 18).\n\nReturns\n\nTuple{Vector{Int}, Vector{Float64}}: A tuple of two vectors:\nInfo_n_capture::Vector{Int}: Binary vector indicating if a neutron capture occurred for each event.\nInfo_t_n_capture::Vector{Float64}: Vector containing the capture time for each event (0 if no capture).\n\nErrors\n\nThrows an AssertionError if the specified files do not exist.\nThrows an error if the files are malformed or missing required columns.\n\nExample\n\nInfo_n_capture, Info_t_n_capture = is_n_capture_on_Ar(\"secondary.csv\", \"primary.csv\")\n\n\n\n\n\n","category":"method"},{"location":"#DUNEatLapp.nbr_cluster-Tuple{DataFrames.DataFrame, Float64}","page":"Home","title":"DUNEatLapp.nbr_cluster","text":"function nbrcluster(df::DataFrame,radius::Float64) function to get the number of cluster of an ULALAP event. It accepts a DataFrame for dfUla, a Float for radius.  It returns a DataFrame with the event index and the number of cluster.\n\n\n\n\n\n","category":"method"},{"location":"#DUNEatLapp.process_clustering_neutron_file-Tuple{DataFrames.DataFrame, Float64, Vector{Int64}, Vector{<:Real}}","page":"Home","title":"DUNEatLapp.process_clustering_neutron_file","text":"function processclusteringneutronfile(df::DataFrame,radius::Float64,nArinfo::Vector{Int64},tnArinfo::Vector{<:Real}) function to process a neutron file. It needs the ulalap file, the radius to use in the cluster, and the info about the capture it will return the energy of clusters as well as the maximum energy of each cluster\n\n\n\n\n\n","category":"method"}]
}
